@using MudBlazor
@using System.Reflection
@using Gems.Enterprise.WebApp.FirstApplication.Models


<MudItem xs="12" md="12">

 @*Two way binding the reflected properties*@ 
    @if (_loadedProperties?.Count > 0)
    {
        @foreach (var prop in _loadedProperties)
        {
            // Getting the value of the property from the list of loaded properties
            var value = bool.Parse(prop.GetValue(_Choices).ToString());

            // This tag uses reflection to reflect the properties present in the model and actively sets them on checking
            <MudCheckBox T="bool"
             Checked="@value"
             CheckedChanged="(v) => { prop.SetValue(_Choices, v); }"
             Label="@prop.Name" />

        }
    }
</MudItem>


@code {

    // Changing the name of the model would change the list of options available in the component
    private Options1 _Choices = new Options1();

    private List<PropertyInfo> _loadedProperties;

    protected override void OnInitialized()
    {
        _loadedProperties = _Choices.GetType().GetProperties().ToList();
        StateHasChanged();
    }

}