@using MudBlazor
@using Gems.Enterprise.WebApp.FirstApplication.Models
@using System.Reflection

<MudItem xs="12" md="12">

    @if(_loadedProperties.Count > 0)
    {
        @foreach(var prop in _loadedProperties)
        {
            var value = bool.Parse(prop.GetValue(_Choices).ToString());

            <MudCheckBox T ="bool" Checked="@value" CheckedChanged="(v) => {prop.SetValue(_Choices, v); }" Label="@prop.Name"></MudCheckBox>

            _selectedChoices[prop.Name] = value;

        }
        
    }
</MudItem>

@code {

    // Changing the name of the model would change the list of options available in the component
    private AllOptions _Choices = new AllOptions();

    // Helper variable for building the dictionary with the inital data from the model
    private string name = "";

    // Dictionary that actively stores all the names of the options selected and their active state i.e., true or false (true means would be included and vice versa)
    private Dictionary<string, bool> _selectedChoices = new Dictionary<string, bool>();

    private List<PropertyInfo> _loadedProperties;

    protected override void OnInitialized()
    {
        _loadedProperties = _Choices.GetType().GetProperties().ToList();
        foreach(PropertyInfo variable in _loadedProperties)
        {
            bool value = bool.Parse(variable.GetValue(_Choices).ToString());

            name = variable.Name;

            _selectedChoices.Add(name, value);
        }
        base.OnInitialized();
    }
}