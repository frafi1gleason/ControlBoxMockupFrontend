@using MudBlazor
@using System.Reflection
@using System.Dynamic
@using GEMS.GAGE.Models.CorrUltima
@using System.ComponentModel


<MudItem xs="12" md="12">

    @if(_loadedProperties.Count > 0)
    {
        @foreach(var prop in _loadedProperties)
        {
            string displayName = GetAttributeDisplayName(prop);

           
            if(prop.PropertyType == typeof(bool))
            {
                // if (v.Equals(true)) { if (!Selected.ContainsKey(prop.Name)) { Selected.Add(prop.Name, value.ToString()); } }
                var value = bool.Parse(prop.GetValue(choices).ToString());

                if(value.Equals(true))
                {
                    if(!selectedOptions.Contains(prop.Name))
                    {
                        selectedOptions.Add(prop.Name);
                    }
                }
                if(value.Equals(false))
                {
                    if(selectedOptions.Contains(prop.Name))
                    {
                        selectedOptions.Remove(prop.Name);
                    }
                }

                <MudCheckBox T="bool" Checked="@value" CheckedChanged="(v) => { prop.SetValue(choices, v); }" Label="@displayName" />
                
            }         
        }
    }

</MudItem>

<MudItem xs="12" md="12">

    @if (_loadedProperties.Count > 0)
    {
        @foreach (var prop in _loadedProperties)
        {
            string displayName = GetAttributeDisplayName(prop);
            
            if(prop.PropertyType == typeof(int))
            {

                var intValue = int.Parse(prop.GetValue(choices).ToString());

                if(intValue == 0)
                {
                    if(!selectedOptions.Contains(prop.Name))
                    {
                        selectedOptions.Add(prop.Name);
                    }
                }
                if(intValue == -1)
                {
                    if(selectedOptions.Contains(prop.Name))
                    {
                        selectedOptions.Remove(prop.Name);
                    }
                }

                <MudSelect bind-Value="@intValue" ValueChanged="(v) => { prop.SetValue(choices, v); }" T="int" Label="@displayName">
                    <MudSelectItem Value="@(-1)">Off</MudSelectItem>
                    <MudSelectItem Value="@(0)">0</MudSelectItem>
                </MudSelect>

            }            
        }
            
    }

    @if(selectedOptions.Count > 0)
    {
        <h6>@string.Join(",", selectedOptions)</h6>
    }

</MudItem>

@code {
    // Changing the name of the model would change the list of options available in the component
    private MatrixRecipe choices = new MatrixRecipe();

    //[Parameter]
    //public MatrixRecipe NewRecipe { 
    //    get
    //    {
    //        return _newRecipe;
    //    }
    //    set
    //    {
    //        _newRecipe = value;
    //    }        
    //}

    //private MatrixRecipe _newRecipe;

    private List<string> selectedOptions = new List<string>();

    private string defaultValue = "Off";

    // Helper variable for building the dictionary with the inital data from the model
    private string name = "";

    private string? SelectedValue { get; set; }

    private List<PropertyInfo> _loadedProperties;


    protected override void OnInitialized()
    {
        _loadedProperties = choices.GetType().GetProperties().ToList();
   
        base.OnInitialized();
    }

    // Fetches the display name attribute for the reflected property
    private string GetAttributeDisplayName(PropertyInfo property)
    {
        var atts = property.GetCustomAttributes(
            typeof(DisplayNameAttribute), true);
        if (atts.Length == 0)
            return null;
        return (atts[0] as DisplayNameAttribute).DisplayName;
    }
}