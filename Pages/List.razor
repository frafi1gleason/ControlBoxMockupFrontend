@using MudBlazor
@using System.Reflection


<MudText Typo="Typo.h6">Optimization Matrix</MudText>

<MudContainer Class="d-flex justify-start flex-grow-1 gap-4" MaxWidth="MaxWidth.Small">

    @*Checking if the list called Items is not null*@
    @if(Items != null)
    {
        @*Two-way binding data with the property in the child component to the property in the parent component "after =" *@
        <RecipeButton @bind-Recipe = "NewRecipe"/>
    }

    <MudSelect T="Option" @bind-Value="@option" ToStringFunc="@converter" AnchorOrigin="Origin.BottomCenter" Label="Select an option" Variant="Variant.Outlined" Clearable>
        
        @if(Items != null && Items.Count > 0)
        {
            @foreach (var item in Items)
            {
            <MudSelectItem Value="@(new Option() { Name=item})" />
            }
        }


        
    </MudSelect>
</MudContainer>

<MudContainer MaxWidth="MaxWidth.Small">
    <MudExpansionPanel IsExpanded="true" Text="Values">
        <MudText Type="Type.h6" Class="mud-width-full">
            @if (@option.Name.Equals("1"))
            {
                <Component1 />
            }
            @if (@option.Name.Equals("2"))
            {
                <Component2 />
            }
            @if (@option.Name.Equals("3"))
            {
                <Component3 />
            }
            @if (@option.Name.Equals(null))
            {
                isNull = true;
            }
        </MudText>
    </MudExpansionPanel>
</MudContainer>

@code {

    public string choiceSelected = "";

    bool init = false;

    public List<string> Items { get; set; }

    public string? NewRecipe
    {
        get => _NewRecipe;
        set
        {
            _NewRecipe = value;
            Items.Add(value);
            StateHasChanged();
        }
    }

    private string? _NewRecipe;
    protected override void OnInitialized()
    {
        if(!init)
        {
            Items = new List<string>();
            Items.Add("1");
            Items.Add("2");
            Items.Add("3");
            init = true;
            StateHasChanged();
        }
    }
    public Boolean isNull = false;


    Option option = new Option { Name = "1" };

    // The new option entered in the recipe box
    private string? _RecipeButtonResult;

    public string? RecipeButtonResult
    {
        get => _RecipeButtonResult;
        set
        {
            if (value != _RecipeButtonResult && Items != null && !Items.Contains(value))
            {
                _RecipeButtonResult = value;
                Items.Add(_RecipeButtonResult);
                StateHasChanged();
            }
        }
    }

    public class Option
    {
        public string Name { get; set; }

        // Note: this is important so the select can compare options
        public override bool Equals(object o)
        {
            var other = o as Option;
            return other?.Name == Name;
        }

        // Note: this is important so the select can compare options
        public override int GetHashCode() => Name.GetHashCode();

    }

    Func<Option, string> converter = p => p?.Name;

    
  
    
}
