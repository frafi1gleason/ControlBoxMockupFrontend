@using MudBlazor
@inject IDialogService DialogService

<MudButton @onclick="OpenBox" Variant="Variant.Filled" Color="Color.Primary">Recipe</MudButton>



@code {

    // The ? tells that this string can be null
    [Parameter]
    public string? Recipe
    {
        get => _Recipe;
        set
        {
            if(value != null && value != _Recipe)
            {
                _Recipe = value;
                NotifyRecipesUpdated();
            }
        }
    }
    private string? _Recipe;

    [Parameter]
    public EventCallback<string> RecipeChanged { get; set; }

    private async Task NotifyRecipesUpdated()
    {
        await RecipeChanged.InvokeAsync(Recipe);
    }

    // Getting the text in the text field present in the dialog box.
    private async Task OpenBox()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };

        // awaiting the result of Dialog Box being closed. Doesn't cause other tasks to halt.
        var dialogResult = await DialogService.Show<RecipeBox>("Simple Dialog", options).Result;
        if (dialogResult != null)
        {
            // If the data returned is a tuple, then this block is executed
            if (dialogResult.Data is Tuple<DialogResult, string>)
            {

                // Storing the tuple in convData
                var convData = dialogResult.Data as Tuple<DialogResult, string>;
                if(convData !=  null)
                {

                    // Retrieving the second item in the tuple i.e., the string that was typed in as the name of the 
                    // custom recipe
                    Recipe = convData.Item2;
                }
            }
        }

    }

}