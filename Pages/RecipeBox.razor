@using MudBlazor
@using System.Reflection
@using GEMS.GAGE.Models.CorrUltima
@using System.ComponentModel

@*Dialog box that displays a text box and a list of options. Writing a string in the text box and choosing the relevant
    options would make a custom option
*@
<MudDialog>
    <DialogContent>
        <MudContainer Label="Optimization Matrix" MaxWidth="MaxWidth.Small">
            <MudPaper Class="pa-16 ma-2" Color="Lighten1" Label="Optimization Matrix" Outlined="true" Square="true">
                <MudTextField oninput="@TextValueChanged" @bind-Value="@TextValue" Label="Name" Variant="Variant.Filled"></MudTextField>

    @*This component would have all the properties that are available in the current context*@
    <MudItem xs="12" md="12">

        @if(_loadedProperties.Count > 0)
        {
            @foreach(var prop in _loadedProperties)
            {
                string displayName = GetAttributeDisplayName(prop);

           
                if(prop.PropertyType == typeof(bool))
                {
                    // if (v.Equals(true)) { if (!Selected.ContainsKey(prop.Name)) { Selected.Add(prop.Name, value.ToString()); } }
                    var value = bool.Parse(prop.GetValue(_choices).ToString());

                    if(value.Equals(true))
                    {
                        if(!selectedOptions.Contains(prop.Name))
                        {
                            selectedOptions.Add(prop.Name);
                        }
                    }
                    if(value.Equals(false))
                    {
                        if(selectedOptions.Contains(prop.Name))
                        {
                            selectedOptions.Remove(prop.Name);
                        }
                    }

                    <MudCheckBox T="bool" Checked="@value" CheckedChanged="(v) => { prop.SetValue(_choices, v); }" Label="@displayName" />
                
                }         
            }
        }

    </MudItem>

    <MudItem xs="12" md="12">

        @if (_loadedProperties.Count > 0)
        {
            @foreach (var prop in _loadedProperties)
            {
                string displayName = GetAttributeDisplayName(prop);
            
                if(prop.PropertyType == typeof(int))
                {

                    var intValue = int.Parse(prop.GetValue(_choices).ToString());

                    if(intValue == 0)
                    {
                        if(!selectedOptions.Contains(prop.Name))
                        {
                            selectedOptions.Add(prop.Name);
                        }
                    }
                    if(intValue == -1)
                    {
                        if(selectedOptions.Contains(prop.Name))
                        {
                            selectedOptions.Remove(prop.Name);
                        }
                    }

                    <MudSelect bind-Value="@intValue" ValueChanged="(v) => { prop.SetValue(_choices, v); }" T="int" Label="@displayName">
                        <MudSelectItem Value="@(-1)">Off</MudSelectItem>
                        <MudSelectItem Value="@(0)">0</MudSelectItem>
                    </MudSelect>

                }            
            }
            
        }

        @if(selectedOptions.Count > 0)
        {
            <h6>@string.Join(",", selectedOptions)</h6>
        }

    </MudItem>

     </MudPaper>
    </MudContainer>
</DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private MatrixRecipe _choices = new MatrixRecipe();


    private List<string> selectedOptions = new List<string>();

    private string defaultValue = "Off";

    // Helper variable for building the dictionary with the inital data from the model
    private string name = "";

    private string? SelectedValue { get; set; }

    private List<PropertyInfo> _loadedProperties;


    protected override void OnInitialized()
    {
        _loadedProperties = _choices.GetType().GetProperties().ToList();

        base.OnInitialized();
    }

    // Fetches the display name attribute for the reflected property
    private string GetAttributeDisplayName(PropertyInfo property)
    {
        var atts = property.GetCustomAttributes(
            typeof(DisplayNameAttribute), true);
        if (atts.Length == 0)
            return null;
        return (atts[0] as DisplayNameAttribute).DisplayName;
    }

    bool init = false;

    [Parameter]
    public List<MatrixRecipe> Recipes
    {
        get
        {
            return _recipes;
        }
        set
        {
            _recipes = value;

        }

    }
    private List<MatrixRecipe> _recipes;

    [Parameter]
    public string TextValue { get; set; }

    // Gets the value of the text entered in the text box
    public void TextValueChanged(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        TextValue = (string)args.Value;
    }

    // Dialog box contents
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    void Submit()
    {
        _choices.Name = TextValue;
        if(Recipes.Count(x => x.Name == TextValue) == 0)
        {
            MudDialog.Close(new Tuple<DialogResult, MatrixRecipe>(DialogResult.Ok(true), _choices));
        }
        // TODO add else afterwards        

    }
    void Cancel() => MudDialog.Cancel();
}