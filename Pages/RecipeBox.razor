@using System.Reflection
@using GEMS.GAGE.Models.CorrUltima
@using System.ComponentModel

@inject IDialogService DialogService

@*Dialog box that displays a text box and a list of options. Writing a string in the text box and choosing the relevant
    options would make a custom option
*@
<MudDialog>
    <DialogContent>
        <MudContainer Label="Optimization Matrix" MaxWidth="MaxWidth.Small">
            <MudPaper Class="pa-16 ma-2" Color="Lighten1" Label="Optimization Matrix" Outlined="true" Square="true">
                <MudTextField oninput="@TextValueChanged" @bind-Value="@TextValue" Label="Name" Variant="Variant.Filled"></MudTextField>
                
                <div class="d-inline">
                    @*This component would have all the properties that are available in the current context*@

                    @if(_loadedProperties.Count > 0)
                    {
                        @foreach(var prop in _loadedProperties)
                        {
                            string displayName = GetAttributeDisplayName(prop);

           
                            if(prop.PropertyType == typeof(bool))
                            {
                                var value = bool.Parse(prop.GetValue(_choices).ToString());

                                <MudCheckBox T="bool" Checked="@value" CheckedChanged="(v) => { prop.SetValue(_choices, v); }" Label="@displayName" />
                
                            }         
                        }
                    }

                </div>

                <div class="d-inline">

                    @if (_loadedProperties.Count > 0)
                    {
                        @foreach (var prop in _loadedProperties)
                        {
                            string displayName = GetAttributeDisplayName(prop);
            
                            if(prop.PropertyType == typeof(int))
                            {

                                var intValue = int.Parse(prop.GetValue(_choices).ToString());

                                <MudSelect bind-Value="@intValue" ValueChanged="(v) => { prop.SetValue(_choices, v); }" T="int" Label="@displayName">
                                    <MudSelectItem Value="-1">Off</MudSelectItem>
                                    <MudSelectItem Value="0">0</MudSelectItem>
                                    <MudSelectItem Value="1">1</MudSelectItem>
                                    <MudSelectItem Value="2">2</MudSelectItem>
                                    <MudSelectItem Value="3">3</MudSelectItem>
                                    <MudSelectItem Value="4">4</MudSelectItem>
                                    <MudSelectItem Value="5">5</MudSelectItem>
                                    <MudSelectItem Value="6">6</MudSelectItem>
                                </MudSelect>

                            }            
                        }
            
                    }

                </div>
         </MudPaper>
    </MudContainer>
</DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>

</MudDialog>

@code {
    private MatrixRecipe _choices = new MatrixRecipe();

    // List storing the selected options in the list
    private List<string> selectedOptions = new List<string>();

    private string? SelectedValue { get; set; }

    private List<PropertyInfo> _loadedProperties;

    protected override void OnInitialized()
    {
        _loadedProperties = _choices.GetType().GetProperties().ToList();

        base.OnInitialized();
    }

    // Fetches the display name attribute for the reflected property
    private string GetAttributeDisplayName(PropertyInfo property)
    {
        var atts = property.GetCustomAttributes(
            typeof(DisplayNameAttribute), true);
        if (atts.Length == 0)
            return null;
        return (atts[0] as DisplayNameAttribute).DisplayName;
    }

    // Property and variable holding the Recipes
    [Parameter]
    public List<MatrixRecipe> Recipes
    {
        get
        {
            return _recipes;
        }
        set
        {
            _recipes = value;
        }
    }

    private List<MatrixRecipe> _recipes;

    [Parameter]
    public string TextValue { get; set; }

    // Gets the value of the text entered in the text box
    public void TextValueChanged(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        TextValue = (string)args.Value;
    }

    // Dialog box contents
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    void Submit()
    {

        _choices.Name = TextValue;
        if(Recipes.Count(x => x.Name == TextValue) == 0)
        {
            MudDialog.Close(new Tuple<DialogResult, MatrixRecipe>(DialogResult.Ok(true), _choices));
        }
        // TODO add else afterwards  
        else
        {
            MessageBox();
        }
        if(TextValue == null)
        {
            MessageBoxNameDNE();
        }
    }
    void Cancel() => MudDialog.Cancel();

    private async void MessageBox()
    {
        bool? result = await DialogService.ShowMessageBox(
            "",
            "Name already exists",
            yesText: "OK", cancelText:null);
        StateHasChanged();
    }

    private async void MessageBoxNameDNE()
    {
        bool? result = await DialogService.ShowMessageBox(
            "",
            "Please enter the name of the recipe",
            yesText: "OK", cancelText: null);
        StateHasChanged();
    }


}